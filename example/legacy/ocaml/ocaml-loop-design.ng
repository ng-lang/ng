
let sum x =
    for i = 0 with s = 0 do {
        when i < x: {
            accumulate s + i;
            next (i + 1);
        }
    }

let sum_list lst =
    for lst with sum = 0 do {
        when not (List.empty lst): {
            accumulate hd lst;
            next tl lst;
        }
    }

let plus1_list lst = for lst do {
    when not (List.empty lst): {
        collect (hd lst) + 1;
        next tl list;
    }
}

let fact x =
    for x with prod = 1 do {
        when x > 0: {
            accumlate prod * x;
            next x - 1;
        }
    }

let fib x =
    for x with (prev = 0, next = 0) do {
        when x > 0: {
            accumulate (next, prev + next);
            next x - 1;
        }
    }

let forever f = for do {
    f ();
    next;
}

let serial start = for n = start do {
    yield n;
    next n + 1;
}

let serial2 start = for start do yield next start + 1;
