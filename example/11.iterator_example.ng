
type None {
}

type Node {
    property _next;
    property content;

    fun hasNext() {
        return not(self._next is None);
    }

    fun getNext() {
        return self._next;
    }
}

type List {
    property node;
    property size;

    fun append(value) {
        print("append", value, self);
        self.size := self.size + 1;
        if (self.node is None) {
            self.node := new Node {
                _next: new None {},
                content: value
            };
        } else if (!self.node.hasNext()) {
            self.node._next := new Node {
                _next: new None {},
                content: value
            };
        } else {
            loop current = self {
                if (current.hasNext()) {
                    current := current.getNext();

                    if (!current.hasNext()) {
                        current._next := new Node {
                            _next: current._next,
                            content: value
                        };
                    } else {
                        next current;
                    }
                }
            }
        }
    }

    fun hasNext() {
        return !(self.node is None);
    }

    fun getNext() {
        return node;
    }

    fun toString() {
        loop i = self, text = "[" {
            if (i.hasNext()) {
                val v = i.getNext();
                if (v.hasNext()) {
                    next v, text.append(v.content).append(", ");
                }
                next v, text.append(v.content);
            }
            return text.append("]");
        }
    }
}

val x = new List { node: new None {}, size: 0 };

x.append(1);
x.append(2);
x.append(3);

print(x);
print(x.toString());

fun printList(list) {
    loop i = list {
        if (i.hasNext()) {
            val v = i.getNext();
            print(v.content);
            next v;
        }
    }
}

printList(x);