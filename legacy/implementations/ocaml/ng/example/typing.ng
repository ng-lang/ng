
type int;

type option t;

type result l r;

type map k (option v);

type name_alias = string;
type age_alias = int;

data name_t(string);
data age_t(string);

data people(name_t, aget_t);

type option t =
    | Some t
    | None;

type either l r =
    | Left l
    | Right r;

type result t e =
    | Ok t
    | Err e;

concept monad (m _) {
    return :: t => t -> m t;
    map :: a, b => m a -> (a -> b) -> m b;
}

impl monad option {
    fun return x = Some x;
    fun map opt f = match (opt) with
        | Some x => Some (f x)
        | None => None;
}

concept eq t {
    equal :: t -> t -> bool;
}

type basic_color =
    | Red
    | Green
    | Blue;

data Colored t (t, basic_color);

data Pair a b (a, b);


type int_pair = Pair int

data Node t {
    value: t
    next: option (ref Node t)
}

let x = Pair (1, 2);

let y: Pair int int = Pair (1, 2);

let c: Colored int = Colored (1, Red);

let nodes = Node { 1, Some &Node { 2, Some &Node { 3, None } } };

sig compose :: (a -> b) -> (b -> c) -> (a -> c);
